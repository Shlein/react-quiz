[{"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\index.js":"1","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\ActiveQuiz\\ActiveQuiz.js":"2","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\App.js":"3","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\Navigation\\MenuToggle\\MenuToggle.js":"4","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\ActiveQuiz\\AnswersList\\AnswersList.js":"5","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\UI\\Button\\Button.js":"6","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\UI\\Backdrop\\Backdrop.js":"7","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\FinishedQuiz\\FinishedQuiz.js":"8","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\Navigation\\Drawer\\Drawer.js":"9","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\containers\\QuizCreator\\QuizCreator.js":"10","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\containers\\Quiz\\Quiz.js":"11","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\containers\\QuizList\\QuizList.js":"12","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\containers\\Auth\\Auth.js":"13","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\hoc\\Layout\\Layout.js":"14","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\ActiveQuiz\\AnswersList\\AnswerItem\\AnswerItem.js":"15","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\form\\formFramework.js":"16","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\UI\\Select\\Select.js":"17","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\reportWebVitals.js":"18"},{"size":559,"mtime":1611750075061,"results":"19","hashOfConfig":"20"},{"size":554,"mtime":1610894985501,"results":"21","hashOfConfig":"20"},{"size":621,"mtime":1611577113660,"results":"22","hashOfConfig":"20"},{"size":382,"mtime":1611067567098,"results":"23","hashOfConfig":"20"},{"size":466,"mtime":1610962970309,"results":"24","hashOfConfig":"20"},{"size":338,"mtime":1611051171663,"results":"25","hashOfConfig":"20"},{"size":181,"mtime":1611070743875,"results":"26","hashOfConfig":"20"},{"size":1194,"mtime":1611753600278,"results":"27","hashOfConfig":"20"},{"size":1154,"mtime":1611752246025,"results":"28","hashOfConfig":"20"},{"size":4495,"mtime":1612014432836,"results":"29","hashOfConfig":"20"},{"size":3011,"mtime":1611753184805,"results":"30","hashOfConfig":"20"},{"size":879,"mtime":1612168397760,"results":"31","hashOfConfig":"20"},{"size":3409,"mtime":1611916406128,"results":"32","hashOfConfig":"20"},{"size":805,"mtime":1611074120721,"results":"33","hashOfConfig":"20"},{"size":377,"mtime":1610895123498,"results":"34","hashOfConfig":"20"},{"size":629,"mtime":1612012588880,"results":"35","hashOfConfig":"20"},{"size":597,"mtime":1611917175138,"results":"36","hashOfConfig":"20"},{"size":362,"mtime":1610302442097,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"pe0rsp",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\index.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\ActiveQuiz\\ActiveQuiz.js",[],["79","80"],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\App.js",[],["81","82"],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\Navigation\\MenuToggle\\MenuToggle.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\ActiveQuiz\\AnswersList\\AnswersList.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\UI\\Button\\Button.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\UI\\Backdrop\\Backdrop.js",[],["83","84"],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\FinishedQuiz\\FinishedQuiz.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\Navigation\\Drawer\\Drawer.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\containers\\QuizCreator\\QuizCreator.js",["85"],"import React, {Component} from 'react'\r\nimport classes from './QuizCreactor.css'\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport {createControl, validate, validateForm} from '../../form/formFramework'\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Auxiliary from \"../../hoc/Auxiliary/Auxiliary\";\r\nimport Select from \"../../components/UI/Select/Select\";\r\n\r\nfunction createOptionControl(number) {\r\n  return createControl({\r\n    label: `Вариант ${number}`,\r\n    errorMessage: 'Значение не может быть пустым',\r\n    id: number\r\n  }, {required: true})\r\n}\r\n\r\nfunction createFormControls() {\r\n  return {\r\n    question: createControl({\r\n      label: 'Введите вопрос',\r\n      errorMessage: 'Вопрос не может быть пустым'\r\n    }, {required: true}),\r\n    option1: createOptionControl(1),\r\n    option2: createOptionControl(2),\r\n    option3: createOptionControl(3),\r\n    option4: createOptionControl(4),\r\n  }\r\n}\r\n\r\nexport default class QuizCreator extends Component {\r\n\r\n  state = {\r\n    quiz: [],\r\n    isFormValid: false,\r\n    rightAnswerId: 1,\r\n    formControls: createFormControls()\r\n  }\r\n\r\n  submitHandler = event => {\r\n    event.preventDefault()\r\n  }\r\n\r\n  addQuestionHandler = (event) => {\r\n    event.preventDefault()\r\n\r\n    const quiz = this.state.quiz.concat()\r\n    const index = quiz.length + 1\r\n\r\n    const {question, option1, option2, option3, option4} = this.state.formControls\r\n\r\n    const questionItem = {\r\n      question: this.state.formControls.question.value,\r\n      id: index,\r\n      rightAnswerId: this.state.rightAnswerId,\r\n      answers: [\r\n        {text: option1.value, id: option1.id},\r\n        {text: option2.value, id: option2.id},\r\n        {text: option3.value, id: option3.id},\r\n        {text: option4.value, id: option4.id},\r\n      ]\r\n    }\r\n    quiz.push(questionItem)\r\n\r\n    this.setState({\r\n      quiz,\r\n      isFormValid: false,\r\n      rightAnswerId: 1,\r\n      formControls: createFormControls()\r\n    })\r\n  }\r\n\r\n  createQuizHandler = (event) => {\r\n    event.preventDefault()\r\n\r\n    console.log(this.state.quiz)\r\n\r\n    // TODO: Server\r\n  }\r\n\r\n  changeHandler = (value, controlName) => {\r\n    const formControls = { ...this.state.formControls }\r\n    const control = { ...formControls[controlName] }\r\n\r\n    control.touched = true\r\n    control.value = value\r\n    control.valid = validate(control.value, control.validation)\r\n\r\n    formControls[controlName] = control\r\n\r\n    this.setState({\r\n      formControls,\r\n      isFormValid: validateForm(formControls)\r\n    })\r\n  }\r\n\r\n  renderControls = () => {\r\n    return Object.keys(this.state.formControls).map((controlName, index) => {\r\n      const control = this.state.formControls[controlName]\r\n\r\n      return (\r\n        <Auxiliary key={controlName + index}>\r\n          <Input\r\n            label={control.label}\r\n            value={control.value}\r\n            valid={control.valid}\r\n            shouldValidate={!!control.validation}\r\n            touched={control.touched}\r\n            errorMessage={control.errorMessage}\r\n            onChange={event => this.changeHandler(event.target.value, controlName)}\r\n          />\r\n\r\n          { index === 0 ? <hr/> : null }\r\n        </Auxiliary>\r\n      )\r\n    })\r\n  }\r\n\r\n  selectChangeHandler = event => {\r\n    this.setState({\r\n      rightAnswerId: +event.target.value\r\n    })\r\n  }\r\n\r\n  render () {\r\n    const select = <Select\r\n      label=\"Выберите правильный ответ\"\r\n      value={this.state.rightAnswerId}\r\n      onChange={this.selectChangeHandler}\r\n      options={[\r\n        {text: 1, value: 1},\r\n        {text: 2, value: 2},\r\n        {text: 3, value: 3},\r\n        {text: 4, value: 4},\r\n      ]}\r\n    />\r\n\r\n    return (\r\n      <div className={classes.QuizCreator}>\r\n        <div>\r\n\t\t\t\t  <h1>Создание теста</h1>\r\n\r\n          <form onSubmit={this.submitHandler}>\r\n\r\n            { this.renderControls() }\r\n\r\n            {select}\r\n\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={this.addQuestionHandler}\r\n              disabled={!this.state.isFormValid}\r\n            >\r\n              Добавить вопрос\r\n            </Button>\r\n\r\n            <Button\r\n              type=\"success\"\r\n              onClick={this.createQuizHandler}\r\n              disabled={this.state.quiz.length === 0}\r\n            >\r\n              Создать тест\r\n            </Button>\r\n\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\containers\\Quiz\\Quiz.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\containers\\QuizList\\QuizList.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\containers\\Auth\\Auth.js",["86"],"import React, {Component} from 'react'\r\nimport classes from './Auth.css'\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport is from 'is_js'\r\n\r\nexport default class  extends Component {\r\n\r\n  state = {\r\n    isFormValid: false,\r\n\r\n    formControls: {\r\n      email: {\r\n        value: '',\r\n        type: 'email',\r\n        label: 'Email',\r\n        errorMessage: 'Введите корректный email',\r\n        valid: false,\r\n        touched: false,\r\n        validation: {\r\n          required: true,\r\n          email: true\r\n        }\r\n      },\r\n      password: {\r\n        value: '',\r\n        type: 'password',\r\n        label: 'Password',\r\n        errorMessage: 'Введите корректный пароль',\r\n        valid: false,\r\n        touched: false,\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        }\r\n      },\r\n    }\r\n  }\r\n\r\n  loginHandler = () => {\r\n\r\n  }\r\n\r\n  registerHandler = () => {\r\n\r\n  }\r\n\r\n  submitHandler = event => event.preventDefault()\r\n\r\n  validateControl(value, validation) {\r\n    if (!validation) {\r\n      return true\r\n    }\r\n\r\n    let isValid = true\r\n\r\n    if (validation.required) {\r\n      isValid = value.trim() !== '' && isValid\r\n    }\r\n\r\n    if (validation.email) {\r\n      isValid = is.email(value) && isValid\r\n    }\r\n\r\n    if (validation.minLength) {\r\n      isValid = value.length >= validation.minLength && isValid\r\n    }\r\n\r\n    return isValid\r\n  }\r\n\r\n  onChangeHandler = (event, controlName) => {\r\n    const formControls = { ...this.state.formControls }\r\n    const control = { ...formControls[controlName] }\r\n\r\n    control.value = event.target.value\r\n    control.touched = true\r\n    control.valid = this.validateControl(control.value, control.validation)\r\n\r\n    formControls[controlName] = control\r\n\r\n    let isFormValid = true\r\n\r\n    Object.keys(formControls).forEach(name => {\r\n      isFormValid = formControls[name].valid && isFormValid\r\n    })\r\n\r\n    this.setState({\r\n      formControls, isFormValid\r\n    })\r\n  }\r\n\r\n  renderInputs() {\r\n    return Object.keys(this.state.formControls).map((controlName, index) => {\r\n      const control = this.state.formControls[controlName]\r\n      return (\r\n        <Input\r\n          key={controlName + index}\r\n          type={control.type}\r\n          value={control.value}\r\n          valid={control.valid}\r\n          touched={control.touched}\r\n          label={control.label}\r\n          shouldValidate={!!control.validation}\r\n          errorMessage={control.errorMessage}\r\n          onChange={event => this.onChangeHandler(event, controlName)}\r\n        />\r\n      )\r\n    })\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className={classes.Auth}>\r\n        <div>\r\n          <h1>Авторизация</h1>\r\n\r\n          <form onSubmit={this.submitHandler} className={classes.AuthForm}>\r\n\r\n            { this.renderInputs() }\r\n\r\n            <Button\r\n              type=\"success\"\r\n              onClick={this.loginHandler}\r\n              disabled={!this.state.isFormValid}\r\n            >\r\n              Войти\r\n            </Button>\r\n\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={this.registerHandler}\r\n              disabled={!this.state.isFormValid}\r\n            >\r\n              Зарегистрироваться\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\hoc\\Layout\\Layout.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\ActiveQuiz\\AnswersList\\AnswerItem\\AnswerItem.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\form\\formFramework.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\components\\UI\\Select\\Select.js",[],"C:\\Users\\optim\\WebstormProjects\\react-quiz\\src\\reportWebVitals.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"87","replacedBy":"91"},{"ruleId":"89","replacedBy":"92"},{"ruleId":"87","replacedBy":"93"},{"ruleId":"89","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":49,"column":12,"nodeType":"97","messageId":"98","endLine":49,"endColumn":20},{"ruleId":"99","severity":1,"message":"100","line":7,"column":1,"nodeType":"101","endLine":142,"endColumn":2},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],["102"],["103"],["102"],["103"],"no-unused-vars","'question' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous class","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]